{"version":3,"sources":["modules/application/form.tsx","modules/application/details.tsx","modules/application/list.tsx","modules/application/new.tsx","modules/application/index.tsx","modules/microfrontend/form.tsx","modules/microfrontend/details.tsx","modules/microfrontend/new.tsx","modules/microfrontend/index.tsx","app/fetch.ts","modules/version/form.tsx","modules/version/details.tsx","modules/version/new.tsx","modules/version/index.tsx","app/index.tsx","serviceWorker.ts","index.tsx"],"names":["Title","Typography","NewApplication","Paragraph","Text","Select","Option","application","isNew","id","useAxios","url","method","manual","result","data","createApplication","loading","error","onFinish","values","a","to","title","name","style","margin","labelCol","span","onFinishFailed","errorInfo","console","log","Item","label","rules","required","message","type","htmlType","className","extra","width","marginRight","microfrontends","map","microfrontend","ApplicationDetails","applicationId","useParams","target","href","ApplicationCard","ApplicationList","applications","refetch","useEffect","key","ApplicationHome","match","useRouteMatch","exact","path","NewMicrofrontend","history","useHistory","createmicrofrontend","URLSearchParams","useLocation","search","get","info","goBack","columns","dataIndex","render","asd","dataSource","versions","v","version","color","createdAt","MicrofrontendDetails","microfrontendId","MicrofrontendsHome","axios","Axios","create","baseURL","configure","NewVersion","createVersion","approveVersion","files","rest","reduce","agg","file","endsWith","cssFiles","push","jsFiles","js","css","handleApprove","status","onClick","VersionDetails","versionId","VersionsHome","App","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.a25676b8.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport useAxios from 'axios-hooks';\n  \nimport {\n\tRedirect, Link\n  } from \"react-router-dom\";\n  import { Form, Input, Button, Select, Card, Typography, Divider } from 'antd';\n\n  const { Title, Paragraph, Text } = Typography;\n  const { Option } = Select;\n\nconst NewApplication : React.FC<{\n\tapplication:any\n}> = ({ application }) => {\n\tconst isNew = !application.id;\n\tconst [{ data : result, loading, error }, createApplication] = useAxios({\n\t\turl: `/applications${isNew ? '' : `/${application.id}`}`,\n\t\tmethod: isNew ? 'POST' : 'PUT'\n\t}, { manual: true});\n\n  \n\tconst onFinish = async (values :any) => {\n\t\tawait createApplication({\n\t\t\tdata: values\n\t\t});\n\t};\n  \n\tconst onFinishFailed = (errorInfo : any) => {\n\t  console.log('Failed:', errorInfo);\n\t};\n\n\n\tif (result) return <Redirect to=\"/application\" />\n\n\treturn (\n\t\t<Card title={isNew ? 'Creating' : `Editing ${application.name}`} style={{ margin: '32px'}}>\n\t\t\t<Form\n\t\t\tlabelCol={{ span: 2}}\n\t\t\tname=\"basic\"\n\t\t\tonFinish={onFinish}\n\t\t\tonFinishFailed={onFinishFailed}\n\t\t\t>\n\t\t\t<Form.Item\n\t\t\t\tlabel=\"Name\"\n\t\t\t\tname=\"name\"\n\t\t\t\trules={[{ required: true, message: 'Your microfrontend name.' }]}\n\t\t\t>\n\t\t\t\t<Input />\n\t\t\t</Form.Item>\n\n\t\t\t{/* <Form.Item name=\"type\" label=\"type\" rules={[{ required: true }]}>\n\t\t\t\t<Select\n\t\t\t\t\tplaceholder=\"Select a option and change input text above\"\n\t\t\t\t\tallowClear\n\t\t\t\t>\n\t\t\t\t\t<Option value=\"menu\">male</Option>\n\t\t\t\t\t<Option value=\"order_type\">female</Option>\n\t\t\t\t\t<Option value=\"order_type\">female</Option>\n\t\t\t\t\t<Option value=\"other\">other</Option>\n\t\t\t\t</Select>\n\t\t\t\t</Form.Item> */}\n\n\t\t\t<Form.Item>\n\t\t\t\t<Button type=\"primary\" htmlType=\"submit\">\n\t\t\t\t\tSave\n\t\t\t\t</Button>\n\t\t\t</Form.Item>\n\t\t\t</Form>\n\n\t\t\t\n\t\t\t{\n\t\t\t\tisNew ? null : (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<Typography>\n\t\t\t\t\t\t\t<Title>Micros</Title>\n\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t\t<div className=\"Application__microfrontend-list\">\n\t\t\t\t\t\t\t\t<Card title=\"Create microfrontend\" extra={<Link to={`/microfrontend/new?applicationId=${application.id}`} >New</Link>} style={{ width: 300, marginRight: '18px'  }}>\n\t\t\t\t\t\t\t\t\tCreate microfrontend\n\t\t\t\t\t\t\t\t</Card>\n\t\t\t\t\t\t\t\t{application.microfrontends.map((microfrontend: any) => (\n\t\t\t\t\t\t\t\t\t<Card title={microfrontend.name} extra={<Link to={`/microfrontend/${microfrontend.id}`} >Edit</Link>} style={{ width: 300, marginRight: '18px'  }}>\n\t\t\t\t\t\t\t\t\t\t{microfrontend.name}\n\t\t\t\t\t\t\t\t\t</Card>\n\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t</>\n\t\t\t\t)\n\t\t\t}\n\t\t</Card>\n\t)\n  }\n\n  export default NewApplication;","\nimport React from 'react';\n\nimport useAxios from 'axios-hooks';\nimport {\n\tuseParams, Link\n  } from \"react-router-dom\";\n\n  import ApplicationForm from './form';\n  import { Form, Input, Button, Select, Card, Typography, Divider } from 'antd';\n\n  \nfunction ApplicationDetails () {\n\tlet { applicationId } = useParams();\n\tconst [{ data : application, loading, error }, refetch] = useAxios(`/applications/${applicationId}`);\n\n\n\tif (loading) return <div>loading</div>;\n\n\treturn (\n\t\t<div>\n\t\t\t<a target=\"_blank\" href={`http://localhost:8080/applications/${applicationId}/meta`}> Meta.json</a>\n\t\t\t<ApplicationForm application={application} />  \n\t\t</div>\n\t);\n  }\n\n  export default ApplicationDetails","import React, { useEffect, useState } from 'react';\nimport useAxios from 'axios-hooks';\n\nimport { Link } from \"react-router-dom\";\n  \nimport './list.css';\nimport { Card } from 'antd';\n\n\n\nconst ApplicationCard : React.FC<{\n\tapplication: any\n}> = ({ application }) => {\n\treturn (\n\t\t<Card title={application.name} extra={<Link to={`/application/${application.id}`}>Edit</Link>} style={{ width: 300, marginRight: '18px' }}>\n\t\t\t<p>Name: {application.name}</p>\n\t\t</Card>\n\t)\n}\n\nfunction ApplicationList() {\n\tconst [{ data : applications, loading, error }, refetch] = useAxios('/applications', { manual: true });\n\n\tuseEffect(() => {\n\t\trefetch();\n\t}, [])\n\n\tif (!applications) return null;\n\treturn (\n\t  <div className=\"ApplicationList\">\n\t\t<Card title=\"Create application\" extra={<Link to=\"/application/new\">New</Link>} style={{ width: 300, marginRight: '18px'  }}>\n\t\t\tCreate application\n\t\t</Card>\n\t\t{applications.map((application: any) => (\n\t\t\t<ApplicationCard key={application.id} application={application} />\n\t\t))}\n\t  </div>\n\t);\n  }\n\n  export default ApplicationList","import React from 'react';\nimport ApplicationForm from './form';\n  \nfunction NewApplication () {\n\treturn <ApplicationForm application={{}} />\n  }\n\n  export default NewApplication;","import React from 'react';\nimport {\n\tSwitch,\n\tRoute,\n\tuseRouteMatch,\n  } from \"react-router-dom\";\n\nimport Details from './details';\nimport List from './list';\nimport New from './new';\n\nfunction ApplicationHome() {\n\tlet match = useRouteMatch();\n  \n\treturn (\n\t  <div>\n\t\t<Switch>\n\t\t  <Route exact path={`${match.path}/new`}><New /></Route>\n\t\t  <Route path={`${match.path}/:applicationId`}><Details /></Route>\n\t\t  <Route path={match.path}><List /></Route>\n\t\t</Switch>\n\t  </div>\n\t);\n  }\n\n  export default ApplicationHome","import React, { useState } from 'react';\nimport useAxios from 'axios-hooks';\n  \nimport {\n\tRedirect, Link, useLocation,useHistory\n  } from \"react-router-dom\";\n  import { Form, Input, Button, Select, Card, Typography, Timeline, Table } from 'antd';\n\n  const { Title, Paragraph, Text } = Typography;\n  const { Option } = Select;\n\n  function useQuery() {\n\treturn new URLSearchParams(useLocation().search);\n  }\n\nconst NewMicrofrontend : React.FC<{\n\tmicrofrontend:any\n}> = ({ microfrontend }) => {\n\tconst isNew = !microfrontend.id;\n\tconst history = useHistory();\n\n\tconst [{ data : result, loading, error }, createmicrofrontend] = useAxios({\n\t\turl: `/microfrontends${isNew ? '' : `/${microfrontend.id}`}`,\n\t\tmethod: isNew ? 'POST' : 'PUT'\n\t}, { manual: true});\n\n\tconst applicationId = useQuery().get('applicationId');\n  \n\tconsole.info({ applicationId })\n\tconst onFinish = async (values :any) => {\n\t\tawait createmicrofrontend({\n\t\t\tdata: {\n\t\t\t\t...values,\n\t\t\t\tapplicationId\n\t\t\t},\n\t\t});\n\t\thistory.goBack();\n\t};\n  \n\tconst onFinishFailed = (errorInfo : any) => {\n\t  console.log('Failed:', errorInfo);\n\t};\n\n\tconst columns = [\n\t\t{\n\t\t  title: 'Created at',\n\t\t  dataIndex: 'createdAt',\n\t\t  key: 'createdAt'\n\t\t},\n\t\t{\n\t\t  title: 'Name',\n\t\t  dataIndex: 'name',\n\t\t  key: 'name',\n\t\t},\n\t\t{\n\t\t\ttitle: 'Status',\n\t\t\tdataIndex: 'status',\n\t\t\tkey: 'status',\n\t\t  },\n\t\t{\n\t\t  title: 'Action',\n\t\t  render: (asd: any) => {\n\t\t  \treturn <span>\n\t\t\t\t  <Button>Aprove</Button>\n\t\t\t\t</span>\n\t\t  },\n\t\t//   render: (text, record) => (\n\t\t// \t<span>\n\t\t// \t  <a style={{ marginRight: 16 }}>Invite {record.name}</a>\n\t\t// \t  <a>Delete</a>\n\t\t// \t</span>\n\t\t//   ),\n\t\t},\n\t  ];\n\n\n\tif (result) return null\n\n\treturn (\n\t\t<Card title={isNew ? 'Creating' : `Editing ${microfrontend.name}`} style={{ margin: '32px'}}>\n\t\t\t<Form\n\t\t\tlabelCol={{ span: 2}}\n\t\t\tname=\"basic\"\n\t\t\tonFinish={onFinish}\n\t\t\tonFinishFailed={onFinishFailed}\n\t\t\t>\n\t\t\t<Form.Item\n\t\t\t\tlabel=\"Name\"\n\t\t\t\tname=\"name\"\n\t\t\t\trules={[{ required: true, message: 'Your microfrontend name.' }]}\n\t\t\t>\n\t\t\t\t<Input />\n\t\t\t</Form.Item>\n\n\t\t\t{/* <Form.Item name=\"type\" label=\"type\" rules={[{ required: true }]}>\n\t\t\t\t<Select\n\t\t\t\t\tplaceholder=\"Select a option and change input text above\"\n\t\t\t\t\tallowClear\n\t\t\t\t>\n\t\t\t\t\t<Option value=\"menu\">male</Option>\n\t\t\t\t\t<Option value=\"order_type\">female</Option>\n\t\t\t\t\t<Option value=\"order_type\">female</Option>\n\t\t\t\t\t<Option value=\"other\">other</Option>\n\t\t\t\t</Select>\n\t\t\t\t</Form.Item> */}\n\n\t\t\t<Form.Item>\n\t\t\t\t<Button type=\"primary\" htmlType=\"submit\">\n\t\t\t\t\tSave\n\t\t\t\t</Button>\n\t\t\t</Form.Item>\n\t\t\t</Form>\n\n\t\t\t{\n\t\t\t\tisNew ? null : (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<Title>Versions</Title>\n\t\t\t\t\t\t<Table columns={columns} dataSource={microfrontend.versions.map((v: any) => ({ ...v, key: v.id}))} />\n\n\t\t\t\t\t\t<Title>History</Title>\n\t\t\t\t\t\t<Timeline>\n\t\t\t\t\t\t\t{microfrontend.versions.map((version : any) => (\n\t\t\t\t\t\t\t\t<Timeline.Item key={version.id} color=\"green\">Version {version.name} created at {version.createdAt}</Timeline.Item>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</Timeline>\n\t\t\t\t\t</>\n\t\t\t\t)\n\t\t\t}\n\t\t</Card>\n\t)\n  }\n\n  export default NewMicrofrontend;","\nimport React from 'react';\n\nimport useAxios from 'axios-hooks';\nimport {\n\tuseParams,\n  } from \"react-router-dom\";\n\n  import MicrofrontendForm from './form';\n\n  \nfunction MicrofrontendDetails () {\n\tlet { microfrontendId } = useParams();\n\tconst [{ data : microfrontend, loading, error }, refetch] = useAxios(`/microfrontends/${microfrontendId}`);\n\n\n\tif (loading) return <div>loading</div>;\n\n\treturn (\n\t<MicrofrontendForm microfrontend={microfrontend} />  \n\t);\n  }\n\n  export default MicrofrontendDetails","import React from 'react';\nimport MicrofrontendForm from './form';\n  \nfunction NewMicrofrontend () {\n\treturn <MicrofrontendForm microfrontend={{}} />\n}\n\nexport default NewMicrofrontend;","import React from 'react';\n\n import {\n\tSwitch,\n\tRoute,\n\tuseRouteMatch,\n  } from \"react-router-dom\";\n\nimport Details from './details';\nimport New from './new';\n\nfunction MicrofrontendsHome() {\n\tlet match = useRouteMatch();\n  \n\treturn (\n\t  <div>\n\t\t<Switch>\n\t\t<Route exact path={`${match.path}/new`}><New /></Route>\n\t\t  <Route path={`${match.path}/:microfrontendId`}><Details /></Route>\n\t\t</Switch>\n\t  </div>\n\t);\n  }\n\n  export default MicrofrontendsHome","import { configure } from 'axios-hooks';\nimport Axios from 'axios';\n \nconst axios = Axios.create({\n  baseURL: 'http://localhost:8080/'\n})\n \nconfigure({ axios });","import React, { useState } from 'react';\nimport useAxios from 'axios-hooks';\n  \nimport {\n\tRedirect, useLocation,useHistory\n  } from \"react-router-dom\";\n  import { Form, Input, Button, Select, Card, Typography, Divider } from 'antd';\n  import { MinusCircleOutlined, PlusOutlined } from '@ant-design/icons';\n\n\n  const { Title, Paragraph, Text } = Typography;\n  const { Option } = Select;\n\n  function useQuery() {\n\treturn new URLSearchParams(useLocation().search);\n  }\n\nconst NewVersion : React.FC<{\n\tversion:any\n}> = ({ version }) => {\n\tconst isNew = !version.id;\n\tconst history = useHistory();\n\tconst [{ data : result, loading, error }, createVersion] = useAxios({\n\t\turl: `/versions${isNew ? '' : `/${version.id}`}`,\n\t\tmethod: isNew ? 'POST' : 'PUT'\n\t}, { manual: true});\n\n\tconst [_, approveVersion] = useAxios({\n\t\turl: `/versions/${version.id}/approve`,\n\t\tmethod: 'PUT'\n\t}, { manual: true} );\n\n\tconst microfrontendId = useQuery().get('microfrontendId');\n  \n\tconst onFinish = async (values :any) => {\n\t\tconst { files, ...rest } = values;\n\t\tconst { jsFiles, cssFiles } = files.reduce((agg: any,file : string) => {\n\t\t\tif (file.endsWith('.css')) agg.cssFiles.push(file);\n\t\t\tif (file.endsWith('.js')) agg.jsFiles.push(file);\n\t\t\treturn agg;\n\t\t}, { jsFiles: [], cssFiles: []});\n\t\tawait createVersion({\n\t\t\tdata: {\n\t\t\t\t...rest,\n\t\t\t\tfiles: {\n\t\t\t\t\tjs: jsFiles,\n\t\t\t\t\tcss: cssFiles\n\t\t\t\t},\n\t\t\t\tmicrofrontendId\n\t\t\t},\n\t\t});\n\t\thistory.goBack();\n\t};\n  \n\tconst onFinishFailed = (errorInfo : any) => {\n\t  console.log('Failed:', errorInfo);\n\t};\n\n\tconst handleApprove = async () => {\n\t\tawait approveVersion();\n\t}\n\n\n\tif (result) return null\n\n\treturn (\n\t\t<Card title={isNew ? 'Creating' : `Editing ${version.name}`} style={{ margin: '32px'}}>\n\t\t\t<Form\n\t\t\tlabelCol={{ span: 2}}\n\t\t\tname=\"basic\"\n\t\t\tonFinish={onFinish}\n\t\t\tonFinishFailed={onFinishFailed}\n\t\t\t>\n\t\t\t<Form.Item\n\t\t\t\tlabel=\"Name\"\n\t\t\t\tname=\"name\"\n\t\t\t\trules={[{ required: true, message: 'Your version name.' }]}\n\t\t\t>\n\t\t\t\t<Input />\n\t\t\t</Form.Item>\n\n\t\t\t{version.status}\n\n\t\t\t<Form.Item>\n\t\t\t\t<Button type=\"primary\" htmlType=\"submit\">\n\t\t\t\t\tSave\n\t\t\t\t</Button>\n\t\t\t\t{ version.status === 'NEEDS_APROVAL' && (\n\t\t\t\t\t<Button type=\"default\" onClick={handleApprove} >\n\t\t\t\t\t\tApprove\n\t\t\t\t\t</Button>\n\t\t\t\t)}\n\t\t\t</Form.Item>\n\t\t\t</Form>\n\t\t</Card>\n\t)\n  }\n\n  export default NewVersion;","\nimport React from 'react';\n\nimport useAxios from 'axios-hooks';\nimport {\n\tuseParams,\n  } from \"react-router-dom\";\n\n  import VersionForm from './form';\n\n  \nfunction VersionDetails () {\n\tlet { versionId } = useParams();\n\tconst [{ data : version, loading, error }, refetch] = useAxios(`/versions/${versionId}`);\n\n\n\tif (loading) return <div>loading</div>;\n\n\treturn (\n\t<VersionForm version={version} />  \n\t);\n  }\n\n  export default VersionDetails","import React from 'react';\nimport VersionForm from './form';\n  \nfunction NewVersion () {\n\treturn <VersionForm version={{}} />\n}\n\nexport default NewVersion;","import React from 'react';\n\n import {\n\tSwitch,\n\tRoute,\n\tuseRouteMatch,\n  } from \"react-router-dom\";\n\nimport Details from './details';\nimport New from './new';\n\nfunction VersionsHome() {\n\tlet match = useRouteMatch();\n  \n\treturn (\n\t  <div>\n\t\t<Switch>\n\t\t<Route exact path={`${match.path}/new`}><New /></Route>\n\t\t  <Route path={`${match.path}/:versionId`}><Details /></Route>\n\t\t  {/* <Route path={match.path}><List /></Route> */}\n\t\t</Switch>\n\t  </div>\n\t);\n  }\n\n  export default VersionsHome","import React from 'react';\nimport './App.css';\nimport Application from '../modules/application';\nimport Microfrontend from '../modules/microfrontend';\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\nimport './fetch';\nimport Version from '../modules/version';\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route exact path=\"/\"><Link to=\"/application\">Apps</Link></Route>\n        <Route path=\"/application\"><Application /></Route>\n        <Route path=\"/microfrontend\"><Microfrontend /></Route>\n        <Route path=\"/version\"><Version /></Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './app';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  // <React.StrictMode>\n    <App />,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}